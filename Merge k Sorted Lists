class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
    
        if (lists==null||lists.length==0) return null;
        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;
        PriorityQueue<ListNode> queue = new PriorityQueue<ListNode>(lists.length,new Comparator<ListNode>(){
            @Override
            public int compare(ListNode a1,ListNode a2){
                if (a1.val < a2.val){
                    return -1;
                }
                else if (a1.val == a2.val){
                    return 0;
                }
                else{
                    return 1;
                }
            }
            
        });
        
        for (ListNode node:lists){
            if (node != null) queue.add(node);
        }
        
        while (!queue.isEmpty()){
            tail.next = queue.poll();
            tail = tail.next;
            if (tail.next != null){
                queue.add(tail.next);
            }
        }
        
        return dummy.next;
    }
}
